name: DevSecOps Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
permissions:
  contents: write

jobs:
  
  # Step 1: Run Unit Tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test

  # Step 2: Static Code Analysis
  static_analysis:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Step 3: Build the Project
  build:
    runs-on: ubuntu-latest
    needs: static_analysis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

  # Step 4: Build & Push Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository }}:latest
          docker build -t $IMAGE_TAG .
      
      - name: Scan Docker Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:latest
          format: 'table'
          exit-code: 1
          ignore-unfixed: true

      - name: Push Docker Image
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository }}:latest
          docker push $IMAGE_TAG
     
  # Step 5: Update Kubernetes Deployment YAML
  update_image_tag:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Kubernetes Deployment Image 
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository }}:${{ github.sha }}
          sed -i "s|image: .*|image: $IMAGE_TAG|" kubernetes/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Update deployment image tag"
          git push

  # Step 6: Deploy to Kubernetes with ArgoCD
  deploy:
    runs-on: ubuntu-latest
    needs: update_image_tag
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
        env:
          ARGOCD_SERVER: "localhost:8888"
          ARGOCD_USERNAME: "admin"
          ARGOCD_PASSWORD: "4KVENBMhuRrdNY8h"

      - name: Sync Application
        run: |
          argocd app sync my-app
